What happens when you initialize a repository? Why do you need to do it?

	-A folder with the name '.git' is added.
	To differentiate it from the other non-git directories.

How is the staging area different from the working directory and the repository? What value do you think it offers?

	-It can be said to be intermediate of the two.
	Before getting committed, the files are added into the staging area.
	-Value: We can undo our decision to commit a file after adding into the staging area and also it helps to make a part of the repository to be commtted so as to make logical commits.

How can you use the staging area to make sure you have one commit per logical change?

	-Add only one file in the stage area and then commit

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	-When we want to make slightly different versions of the code and don't want to disturb the progress of the original code.
	-When we have different logical branches, we can easily track history of each branch.
	-Like Context Switching
	-Helpful when u are sharing ur code publicly:
		Your Master branch will be the Quality Production branch that will never break.
		And we can have a Development branch on which currently active work is going on.
		Others: Experimental branch, a new fature branch(which u are working on and fully expecting to break)
	-If working on a feature but have to go back and fix a bug on the master branch and then come back on the feature branch.
	-For easy collaboration when working in a team.

How do the diagrams help you visualize the branch structure?

	-We can easily see which is the 'master' branch and which are the different other branches. And whether we could reach a particular commit from the current commit on the current branch.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	-By merging, we get the features of both the branches combined.
	-We represent it this way because finally only one branch is left after merge.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

	-Git's automatic merging reduces the overhead of manual merging.